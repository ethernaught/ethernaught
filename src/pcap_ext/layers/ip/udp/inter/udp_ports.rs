#[derive(Copy, Clone, Eq, PartialEq, Hash, Debug)]
pub enum UdpPorts {
    ///WELL KNOWN PORTS
    Echo,
    Discard,
    Qotd,
    Chargen,
    FtpData,
    Ftp,
    Ssh,
    Telnet,
    Smtp,
    Time,
    NameServer,
    WhoIs,
    Tacacs,
    Domain,
    Bootps,
    Bootpc,
    Tftp,
    Http,
    Kerberos,
    Pop3,
    Sunrpc,
    Nntp,
    Ntp,
    NetbiosNs,
    NetbiosDgm,
    NetbiosSsn,
    Imap,
    Snmp,
    Snmptrap,
    Xdmcp,
    Irc,
    Ldap,
    Https,
    MicrosoftDs,
    Syslog,
    Route,
    Courier,
    Dhcpv6Client,
    Dhcpv6Server,
    Ipp,
    Imaps,
    Pop3s,

    ///REGISTERED PORTS
    Socks,
    OpenVpn,
    MsSqlM,
    RadiusAlt,
    Radius,
    RadiusAcct,
    Nfs,
    Stun,
    IpsecNatT,
    Mdns,
    Sip,
    Sips
}

impl UdpPorts {

    pub fn from_code(code: u16) -> Result<Self, String> {
        for c in [
            ///WELL KNOWN PORTS
            Self::Echo,
            Self::Discard,
            Self::Qotd,
            Self::Chargen,
            Self::FtpData,
            Self::Ftp,
            Self::Ssh,
            Self::Telnet,
            Self::Smtp,
            Self::Time,
            Self::NameServer,
            Self::WhoIs,
            Self::Tacacs,
            Self::Domain,
            Self::Bootps,
            Self::Bootpc,
            Self::Tftp,
            Self::Http,
            Self::Kerberos,
            Self::Pop3,
            Self::Sunrpc,
            Self::Nntp,
            Self::Ntp,
            Self::NetbiosNs,
            Self::NetbiosDgm,
            Self::NetbiosSsn,
            Self::Imap,
            Self::Snmp,
            Self::Snmptrap,
            Self::Xdmcp,
            Self::Irc,
            Self::Ldap,
            Self::Https,
            Self::MicrosoftDs,
            Self::Syslog,
            Self::Route,
            Self::Courier,
            Self::Dhcpv6Client,
            Self::Dhcpv6Server,
            Self::Ipp,
            Self::Imaps,
            Self::Pop3s,

            ///REGISTERED PORTS
            Self::Socks,
            Self::OpenVpn,
            Self::MsSqlM,
            Self::RadiusAlt,
            Self::Radius,
            Self::RadiusAcct,
            Self::Nfs,
            Self::Stun,
            Self::IpsecNatT,
            Self::Mdns,
            Self::Sip,
            Self::Sips
        ] {
            if c.get_code() == code {
                return Ok(c);
            }
        }

        Err(format!("Couldn't find for code: {}", code))
    }

    pub fn get_code(&self) -> u16 {
        match self {
            ///WELL KNOWN PORTS
            Self::Echo => 7,
            Self::Discard => 9,
            Self::Qotd => 17,
            Self::Chargen => 19,
            Self::FtpData => 20,
            Self::Ftp => 21,
            Self::Ssh => 22,
            Self::Telnet => 23,
            Self::Smtp => 25,
            Self::Time => 37,
            Self::NameServer => 42,
            Self::WhoIs => 43,
            Self::Tacacs => 49,
            Self::Domain => 53,
            Self::Bootps => 67,
            Self::Bootpc => 68,
            Self::Tftp => 69,
            Self::Http => 80,
            Self::Kerberos => 88,
            Self::Pop3 => 110,
            Self::Sunrpc => 111,
            Self::Nntp => 119,
            Self::Ntp => 123,
            Self::NetbiosNs => 137,
            Self::NetbiosDgm => 138,
            Self::NetbiosSsn => 139,
            Self::Imap => 143,
            Self::Snmp => 161,
            Self::Snmptrap => 162,
            Self::Xdmcp => 177,
            Self::Irc => 194,
            Self::Ldap => 389,
            Self::Https => 443,
            Self::MicrosoftDs => 445,
            Self::Syslog => 514,
            Self::Route => 520,
            Self::Courier => 530,
            Self::Dhcpv6Client => 546,
            Self::Dhcpv6Server => 547,
            Self::Ipp => 631,
            Self::Imaps => 993,
            Self::Pop3s => 995,

            ///REGISTERED PORTS
            Self::Socks => 1080,
            Self::OpenVpn => 1194,
            Self::MsSqlM => 1434,
            Self::RadiusAlt => 1645,
            Self::Radius => 1812,
            Self::RadiusAcct => 1813,
            Self::Nfs => 2049,
            Self::Stun => 3478,
            Self::IpsecNatT => 4500,
            Self::Mdns => 5353,
            Self::Sip => 5060,
            Self::Sips => 5061
        }
    }

    pub fn to_string(&self) -> String {
        match self {
            ///WELL KNOWN PORTS
            Self::Echo => "Echo protocol",
            Self::Discard => "Discard protocol",
            Self::Qotd => "Quote of the Day",
            Self::Chargen => "Character generator",
            Self::FtpData => "FTP data transfer",
            Self::Ftp => "File Transfer Protocol (control)",
            Self::Ssh => "Secure Shell",
            Self::Telnet => "Telnet protocol",
            Self::Smtp => "Simple Mail Transfer Protocol",
            Self::Time => "Time protocol",
            Self::NameServer => "ARPA Host Name Server",
            Self::WhoIs => "WHOIS service",
            Self::Tacacs => "TACACS authentication protocol",
            Self::Domain => "Domain Name System (DNS)",
            Self::Bootps => "DHCP server (Bootstrap Protocol)",
            Self::Bootpc => "DHCP client (Bootstrap Protocol)",
            Self::Tftp => "Trivial File Transfer Protocol",
            Self::Http => "Hypertext Transfer Protocol (HTTP)",
            Self::Kerberos => "Kerberos authentication",
            Self::Pop3 => "Post Office Protocol v3",
            Self::Sunrpc => "RPC portmapper",
            Self::Nntp => "Network News Transfer Protocol",
            Self::Ntp => "Network Time Protocol",
            Self::NetbiosNs => "NetBIOS Name Service",
            Self::NetbiosDgm => "NetBIOS Datagram Service",
            Self::NetbiosSsn => "NetBIOS Session Service",
            Self::Imap => "Internet Message Access Protocol",
            Self::Snmp => "Simple Network Management Protocol",
            Self::Snmptrap => "SNMP Trap",
            Self::Xdmcp => "X Display Manager Control Protocol",
            Self::Irc => "Internet Relay Chat",
            Self::Ldap => "Lightweight Directory Access Protocol",
            Self::Https => "HTTP Secure (HTTPS)",
            Self::MicrosoftDs => "Microsoft Directory Services",
            Self::Syslog => "Syslog",
            Self::Route => "RIP (Routing Information Protocol)",
            Self::Courier => "RPC (experimental)",
            Self::Dhcpv6Client => "DHCPv6 client",
            Self::Dhcpv6Server => "DHCPv6 server",
            Self::Ipp => "Internet Printing Protocol",
            Self::Imaps => "IMAP over TLS/SSL",
            Self::Pop3s => "POP3 over TLS/SSL",

            ///REGISTERED PORTS
            Self::Socks => "SOCKS Proxy",
            Self::OpenVpn => "OpenVPN",
            Self::MsSqlM => "Microsoft SQL Monitor",
            Self::RadiusAlt => "RADIUS authentication",
            Self::Radius => "RADIUS authentication",
            Self::RadiusAcct => "RADIUS accounting",
            Self::Nfs => "Network File System",
            Self::Stun => "STUN (Session Traversal Utilities for NAT)",
            Self::IpsecNatT => "IPsec NAT traversal",
            Self::Mdns => "Multicast DNS",
            Self::Sip => "SIP (Session Initiation Protocol)",
            Self::Sips => "Secure SIP"
        }.to_string()
    }
}
